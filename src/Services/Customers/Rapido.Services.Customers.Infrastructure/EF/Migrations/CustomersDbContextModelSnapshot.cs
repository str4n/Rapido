// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Rapido.Services.Customers.Infrastructure.EF;

#nullable disable

namespace Rapido.Services.Customers.Infrastructure.EF.Migrations
{
    [DbContext(typeof(CustomersDbContext))]
    partial class CustomersDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Rapido.Services.Customers.Domain.Common.Customer.Customer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<DateTime>("CompletedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("character varying(21)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("IsCompleted")
                        .IsRequired()
                        .HasColumnType("character varying(1)");

                    b.Property<string>("IsLocked")
                        .IsRequired()
                        .HasColumnType("character varying(1)");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Nationality")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Customer");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Customer");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Rapido.Services.Customers.Domain.Common.Lockout.Lockout", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("character varying(21)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("Lockouts");

                    b.HasDiscriminator<string>("Type").HasValue("Lockout");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Rapido.Services.Customers.Domain.Corporate.Customer.CorporateCustomer", b =>
                {
                    b.HasBaseType("Rapido.Services.Customers.Domain.Common.Customer.Customer");

                    b.Property<string>("TaxId")
                        .HasColumnType("text");

                    b.HasDiscriminator().HasValue("CorporateCustomer");
                });

            modelBuilder.Entity("Rapido.Services.Customers.Domain.Individual.Customer.IndividualCustomer", b =>
                {
                    b.HasBaseType("Rapido.Services.Customers.Domain.Common.Customer.Customer");

                    b.Property<string>("FullName")
                        .HasColumnType("text");

                    b.HasDiscriminator().HasValue("IndividualCustomer");
                });

            modelBuilder.Entity("Rapido.Services.Customers.Domain.Common.Lockout.PermanentLockout", b =>
                {
                    b.HasBaseType("Rapido.Services.Customers.Domain.Common.Lockout.Lockout");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.HasDiscriminator().HasValue("PermanentLockout");
                });

            modelBuilder.Entity("Rapido.Services.Customers.Domain.Common.Lockout.TemporaryLockout", b =>
                {
                    b.HasBaseType("Rapido.Services.Customers.Domain.Common.Lockout.Lockout");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasDiscriminator().HasValue("TemporaryLockout");
                });

            modelBuilder.Entity("Rapido.Services.Customers.Domain.Common.Lockout.Lockout", b =>
                {
                    b.HasOne("Rapido.Services.Customers.Domain.Common.Customer.Customer", null)
                        .WithMany("Lockouts")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Rapido.Services.Customers.Domain.Common.Customer.Customer", b =>
                {
                    b.Navigation("Lockouts");
                });
#pragma warning restore 612, 618
        }
    }
}
